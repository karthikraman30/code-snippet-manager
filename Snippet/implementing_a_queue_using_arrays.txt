#include <iostream>
using namespace std;

class Queue {
private:
    int capacity;
    int front;
    int rear;
    int size;
    int *items;

public:
    Queue(int cap) {
        capacity = cap;
        front = 0;
        rear = -1;
        size = 0;
        items = new int[capacity];
    }
void enqueue(int item) {
        if (isFull()) {
            cout << "Queue is full" << endl;
            return;
        }
        rear = (rear + 1) % capacity;
        items[rear] = item;
        size++;
    }
int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }
        int frontItem = items[front];
        front = (front + 1) % capacity;
        size--;
        return frontItem;
    }
bool isEmpty() {
        return size == 0;
    }

bool isFull() {
        return size == capacity;
    }
Queue* copy() {
        Queue* newQueue = new Queue(capacity);
        newQueue->front = front;
        newQueue->rear = rear;
        newQueue->size = size;
        for (int i = 0; i < capacity; ++i) {
            newQueue->items[i] = items[i];
        }
        return newQueue;
    }
int peek() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1; 
        }
        return items[front];
    }

void clear() {
        front = 0;
        rear = -1;
        size = 0;
    }

int frontElement() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }
        return items[front];
    }

int rearElement() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }
        return items[rear];
    }

int getSize() {
        return size;
    }

void display() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return;
        }
        int i = front;
        do {
            cout << items[i] << " ";
            i = (i + 1) % capacity;
        } while (i != (rear + 1) % capacity);
        cout << endl;
    }
    
Queue* merge(Queue* otherQueue) {
        Queue* mergedQueue = new Queue(capacity + otherQueue->capacity);
        mergedQueue->front = front;
        mergedQueue->rear = rear + otherQueue->size;

        for (int i = front; i <= rear; ++i)
            mergedQueue->enqueue(items[i]);

        for (int i = otherQueue->front; i <= otherQueue->rear; ++i)
            mergedQueue->enqueue(otherQueue->items[i]);

        return mergedQueue;
    }
Queue* reverse() {
        Queue* reversedQueue = new Queue(capacity);
        int i = front;
        while (i != (rear + 1) % capacity) {
            reversedQueue->enqueue(items[i]);
            i = (i - 1 + capacity) % capacity;
        }
        return reversedQueue;
    }
